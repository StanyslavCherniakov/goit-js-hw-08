{"mappings":"uDAAAA,EAUA,SAAmBC,EAAMC,GACvB,IAAIC,EAAKC,EAAMC,EAAKC,EAChBC,EAAO,EAEX,OAAO,WACLJ,EAAMK,KACNJ,EAAOK,UACP,IAAIC,EAAQ,IAAIC,KAASJ,EAIzB,OAHKD,IACCI,GAASR,EAAMU,IACdN,EAAYO,WAAWD,EAAMV,EAAOQ,IACpCL,GAGT,SAASO,IACPN,EAAY,EACZC,GAAQ,IAAII,KACZN,EAAMJ,EAAKa,MAAMX,EAAKC,GACtBD,EAAM,KACNC,EAAO,OC3BX,MAAMW,EAAUC,SAASC,cAAc,kBACvCF,EAAQG,iBAAiB,QAASC,EAAAnB,EAAA,EAOlC,SAAiBoB,GACfC,EAAKD,EAAIE,OAAOC,MAAQH,EAAIE,OAAOE,MACnCC,aAAaC,QAPK,sBAOgBC,KAAKC,UAAUP,IACjDQ,QAAQC,IAAIT,KAVsC,MACpDN,EAAQG,iBAAiB,UAwBzB,SAAsBE,GACpBA,EAAIW,iBACAV,EAAKW,OAASX,EAAKY,UACrBJ,QAAQC,IAAIT,GACZA,EAAKW,MAAQ,GACbX,EAAKY,QAAU,GACfb,EAAIc,cAAcC,QAClBV,aAAaW,WA9BG,2BAApB,MACMf,EAAO,IAUb,WACE,MAAMgB,EAAYV,KAAKW,MAAMb,aAAac,QAZxB,wBAalB,GAAIF,EAAW,CACb,MAAMG,EAAWzB,EAAQE,cAAc,SACjCwB,EAAc1B,EAAQE,cAAc,YAC1CuB,EAAShB,MAAQa,EAAUL,MAAQK,EAAUL,MAAQ,GACrDS,EAAYjB,MAAQa,EAAUJ,QAAUI,EAAUJ,QAAU,GAC5DZ,EAAKW,MAAQK,EAAUL,MACvBX,EAAKY,QAAUI,EAAUJ,SAhB7BS","sources":["node_modules/throttleit/index.js","src/js/03-feedback.js"],"sourcesContent":["module.exports = throttle;\n\n/**\n * Returns a new function that, when invoked, invokes `func` at most once per `wait` milliseconds.\n *\n * @param {Function} func Function to wrap.\n * @param {Number} wait Number of milliseconds that must elapse between `func` invocations.\n * @return {Function} A new function that wraps the `func` function passed in.\n */\n\nfunction throttle (func, wait) {\n  var ctx, args, rtn, timeoutID; // caching\n  var last = 0;\n\n  return function throttled () {\n    ctx = this;\n    args = arguments;\n    var delta = new Date() - last;\n    if (!timeoutID)\n      if (delta >= wait) call();\n      else timeoutID = setTimeout(call, wait - delta);\n    return rtn;\n  };\n\n  function call () {\n    timeoutID = 0;\n    last = +new Date();\n    rtn = func.apply(ctx, args);\n    ctx = null;\n    args = null;\n  }\n}\n","import throttle from 'throttleit';\n\nconst formRef = document.querySelector('.feedback-form');\nformRef.addEventListener('input', throttle(onInput, 500));\nformRef.addEventListener('submit', onFormSubmit);\nconst STORAGE_KEY = 'feedback-form-state';\nconst data = {};\n\nfillFormOnLoad();\n\nfunction onInput(evt) {\n  data[evt.target.name] = evt.target.value;\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(data));\n  console.log(data);\n}\n\nfunction fillFormOnLoad() {\n  const savedData = JSON.parse(localStorage.getItem(STORAGE_KEY));\n  if (savedData) {\n    const inputRef = formRef.querySelector('input');\n    const textareaRef = formRef.querySelector('textarea');\n    inputRef.value = savedData.email ? savedData.email : '';\n    textareaRef.value = savedData.message ? savedData.message : '';\n    data.email = savedData.email;\n    data.message = savedData.message;\n  }\n}\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n  if (data.email && data.message) {\n    console.log(data);\n    data.email = '';\n    data.message = '';\n    evt.currentTarget.reset();\n    localStorage.removeItem(STORAGE_KEY);\n  }\n}\n"],"names":["$009325bfa61077d9$exports","func","wait","ctx","args","rtn","timeoutID","last","this","arguments","delta","Date","call","setTimeout","apply","$945622fd0f572e60$var$formRef","document","querySelector","addEventListener","$parcel$interopDefault","evt","$945622fd0f572e60$var$data","target","name","value","localStorage","setItem","JSON","stringify","console","log","preventDefault","email","message","currentTarget","reset","removeItem","savedData","parse","getItem","inputRef","textareaRef","$945622fd0f572e60$var$fillFormOnLoad"],"version":3,"file":"03-feedback.ae6161b7.js.map"}